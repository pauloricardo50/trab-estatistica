#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Probabilidade.py
#  


import matplotlib.pyplot as plt
import numpy as np


def CalculaMedia(lstdados):
	somatorio = 0
	media = 0 
	tam = len(lstdados) #quantidade total da amostra
	
	for valor in lstdados:
		somatorio = somatorio + valor;
	#fim  for
	media = somatorio/tam
	
	return media
#fim função media

def VerPar(lstdados):
	if len(lstdados)%2 == 0:
		return True
	#fim if
	
	return False
#fim função
	
def CalculaMediana(lstdados):	
	#Verifica se o tamanho da lista é par
	if VerPar:
		pos1 = lstdados[int((len(lstdados)/2)-1)]
		pos2 = lstdados[int((len(lstdados)/2))]
		media = CalculaMedia([pos1,pos2])
		return media
	#Se for impar
	else:
		pos = lstdados[int(len(lstdados)/2)]
		return pos
#fim função mediana

def CaculaOcorrencias(listaChaves,dicDados):
	maior = 0
	moda = 0
	
	for chave in listaChaves:
		if dicDados[chave] > maior:
			moda = chave
			maior = dicDados[chave]
		#fim if 
	#fim for
	
	return moda
#fim função
	
	
def CalculaModa(lstdados):
	dicDados = {} 	#dicionario de ocorrencias
	
	for valor in lstdados:
		if valor in dicDados.keys():
			dicDados[valor] = dicDados[valor]+1
		else:
			dicDados[valor] = 1
	#fim for

	listaChaves = dicDados.keys()
	moda = CaculaOcorrencias(listaChaves,dicDados)
	
	return moda
#fim função moda

def CalculaVariancia(lstdados):
	media = CalculaMedia(lstdados)
	somatorio = 0
	tam = len(lstdados)
	variancia = 0

	for valor in lstdados:
		somatorio = somatorio + ((valor - media) ** 2)
	#fim for 
	variancia = somatorio/tam-1
	
	return variancia
#fim função variancia

def VerificaDesvioPadrao(lstdados):
	variancia = CalculaVariancia(lstdados)
	variancia = variancia ** (1/2)
	
	return variancia
##fim função Desvio padrão

def PrimeiroQuartil(lstdados):
	pos = round((len(lstdados)+1)*0.25)
	return lstdados[pos]
#fim função 

def TerceiroQuartil(lstdados):
	pos = round((len(lstdados)+1)*0.75)
	return lstdados[pos]
#fim função 

def AmplitudeInterquartil(lstdados):
	primquartil = PrimeiroQuartil(lstdados)
	terquartil = TerceiroQuartil(lstdados)
	return terquartil - primquartil
#fim função 

def ImprimeBoxplot(lstdados):
	#Cria o boxplot
	plt.boxplot(lstdados)
	#Adiciona titulo
	plt.title("Taxa de Atividade Por Grupos de Idade / Mensal")
	#Mostra na tela
	plt.show()
#fim função 

def ImprimeHistograma(lstdados):
	listaAux = [] #lista sem repetição
	for num in lstdados:
		if num not in listaAux:
			listaAux.append(num)
	#fim for
	#print("\n\n")
	listaAux = sorted(listaAux)
	#print(listaAux)
	#criando o histograma
	x = listaAux
	y = lstdados
	plt.hist(lstdados,listaAux,histtype="bar",rwidth=0.8)
	
	#criando o titulo e as legendas dos eixos
	plt.xlabel("Grupos de Idade")
	plt.ylabel("Taxa de Atividade")
	plt.title("Taxa de Atividade Por Grupos de Idade")
	#Mostra o histograma na tela
	plt.show()
#fim função

def lerArquivo():
	mat_Dados = []
	arquivo = open("series_historicas.csv", "rt")
	linha = arquivo.readline();
	
	while linha != "":
		linha = linha.strip("\n")
		linha = linha.split(",")	
		mat_Dados.append(linha)
		linha = arquivo.readline()
	#fim while
	
	arquivo.close()
	
	return mat_Dados
#fim funçao

def trataDados(matDados):
	lstdados = []
	for linha in range(len(matDados)):
		for coluna in range(len(matDados[linha])):
			if (len(matDados[linha][coluna])) == 2:
				valor = int(matDados[linha][coluna])
				lstdados.append(valor)
			#fim for
		#fim for
	#fim for
	return lstdados
#fim função

def main():
	lstdados = []
	
	#Obtendo os dados já ordenados
	matDados = sorted(lerArquivo())
	lstdados = trataDados(matDados)
	#print(lstdados)
	#print("\n\n")
	
	#Imprime todos as analises dos dados
	print('Media: %.6f '% CalculaMedia(lstdados))
	print('Moda: %d '% CalculaModa(lstdados))
	print('Mediana: %.2f '% CalculaMediana(lstdados))
	
	print("Variancia: %.6f" % CalculaVariancia(lstdados))
	print("Desvio Padrao: %.6f " % VerificaDesvioPadrao(lstdados))
	print("Primeiro Quartil: %d" % PrimeiroQuartil(lstdados))
	print("Terceiro Quartil: %d" % TerceiroQuartil(lstdados))
	print("Amplitude Interquartil: %d" % AmplitudeInterquartil(lstdados))

	#Histograma
	ImprimeHistograma(lstdados)

	#BoxPLot
	ImprimeBoxplot(lstdados)
	
	return 0
if __name__ == '__main__':
	main()
